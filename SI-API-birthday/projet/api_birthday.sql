-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1:3306
-- Généré le : mer. 02 déc. 2020 à 16:41
-- Version du serveur :  5.7.31
-- Version de PHP : 7.3.21

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données : `api_birthday`
--

DELIMITER $$
--
-- Procédures
--
DROP PROCEDURE IF EXISTS `ADD_BILLET`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ADD_BILLET` (IN `CODE_DEPART` VARCHAR(50), IN `CODE_ARRIVER` VARCHAR(50), IN `PRIX` FLOAT)  MODIFIES SQL DATA
INSERT INTO billet(B_code_depart,B_code_arriver,B_prix) VALUES (CODE_DEPART,CODE_ARRIVER,PRIX)$$

DROP PROCEDURE IF EXISTS `ALL_AEROPORT`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ALL_AEROPORT` ()  READS SQL DATA
SELECT * FROM aeroport$$

DROP PROCEDURE IF EXISTS `ALL_BILLET_LIBRE`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ALL_BILLET_LIBRE` ()  READS SQL DATA
SELECT * FROM billet WHERE B_reserver = FALSE$$

DROP PROCEDURE IF EXISTS `DELETE_AEROPORT`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_AEROPORT` (IN `ID_AEROPORT` INT)  MODIFIES SQL DATA
DELETE FROM aeroport WHERE A_id = ID_AEROPORT$$

DROP PROCEDURE IF EXISTS `DELETE_BILLET`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_BILLET` (IN `ID_BILLET` INT)  MODIFIES SQL DATA
DELETE FROM billet WHERE B_id = ID_BILLET$$

DROP PROCEDURE IF EXISTS `DELETE_CLIENT`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_CLIENT` (IN `ID_CLIENT` INT)  MODIFIES SQL DATA
DELETE FROM client WHERE C_id = ID_CLIENT$$

DROP PROCEDURE IF EXISTS `DELETE_PAYS`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_PAYS` (IN `ID_PAYS` INT)  MODIFIES SQL DATA
DELETE FROM pays WHERE P_id = ID_PAYS$$

DROP PROCEDURE IF EXISTS `DELETE_RESERVATION`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_RESERVATION` (IN `ID_BILLET` INT)  MODIFIES SQL DATA
DELETE FROM reserver WHERE B_id_billet = ID_BILLET$$

DROP PROCEDURE IF EXISTS `DELETE_VILLE`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_VILLE` (IN `ID_VILLE` INT)  MODIFIES SQL DATA
DELETE FROM ville WHERE V_id = ID_VILLE$$

DROP PROCEDURE IF EXISTS `RESERVATION_CLIENT`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `RESERVATION_CLIENT` (IN `ID_CLEINT` INT)  READS SQL DATA
SELECT * FROM billet NATURAL JOIN reserver NATURAL JOIN aeroport NATURAL JOIN ville NATURAL JOIN pays WHERE R_id_client = ID_CLEINT$$

--
-- Fonctions
--
DROP FUNCTION IF EXISTS `ADD_AEROPORT`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ADD_AEROPORT` (`CODE_AEROPORT` VARCHAR(50), `NAME_AEROPORT` VARCHAR(50), `ID_VILLE` INT) RETURNS TINYINT(1) NO SQL
BEGIN
IF (SELECT count(*) FROM aeroport WHERE A_code = CODE_AEROPORT) = 0 THEN
INSERT INTO aeroport(A_code,A_nom,A_id_ville) VALUES (CODE_AEROPORT,NAME_AEROPORT,ID_VILLE);
RETURN TRUE;
ELSE RETURN FALSE; 
END IF;
END$$

DROP FUNCTION IF EXISTS `ADD_CLIENT`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ADD_CLIENT` (`NAME_CLIENT` VARCHAR(50), `LASTNAME` VARCHAR(50), `EMAIL` VARCHAR(50), `SHA256` VARCHAR(50), `EMPREINTE` VARCHAR(50)) RETURNS TINYINT(1) MODIFIES SQL DATA
BEGIN
IF (SELECT count(*) FROM client WHERE C_mail = EMAIL) = 0 THEN 
INSERT INTO client(C_nom,C_prenom,C_mail,C_hash,C_empreinte) VALUES (NAME_CLIENT,LASTNAME,EMAIL,SHA256,EMPREINTE);
RETURN TRUE;
ELSE RETURN FALSE;
END IF;
END$$

DROP FUNCTION IF EXISTS `ADD_PAYS`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ADD_PAYS` (`NAME_PAYS` VARCHAR(50)) RETURNS TINYINT(1) MODIFIES SQL DATA
BEGIN
IF (SELECT count(*) FROM pays WHERE P_nom = NAME_PAYS) = 0 THEN
INSERT INTO pays(P_nom) VALUES (NAME_PAYS);
RETURN TRUE;
ELSE RETURN FALSE; 
END IF;
END$$

DROP FUNCTION IF EXISTS `ADD_RESERVATION`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ADD_RESERVATION` (`ID_CLIENT` INT, `ID_BILLET` INT) RETURNS TINYINT(1) MODIFIES SQL DATA
BEGIN
IF (SELECT count(*) FROM reserver WHERE R_id_client = ID_CLIENT AND R_id_billet = ID_BILLET) = 0 THEN 
INSERT INTO reserver(R_id_client,R_id_billet) VALUES (ID_CLIENT,ID_BILLET);
RETURN TRUE;
ELSE RETURN FALSE;
END IF;
END$$

DROP FUNCTION IF EXISTS `ADD_VILLE`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ADD_VILLE` (`NAME_VILLE` VARCHAR(50), `ID_PAYS` INT) RETURNS TINYINT(1) MODIFIES SQL DATA
BEGIN
IF (SELECT count(*) FROM ville WHERE V_nom = NAME_VILLE AND V_id_pays = ID_PAYS) = 0 THEN
INSERT INTO ville(V_nom,V_id_pays) VALUES (NAME_VILLE,ID_PAYS);
RETURN TRUE;
ELSE RETURN FALSE; 
END IF;
END$$

DROP FUNCTION IF EXISTS `EXISTE_AEROPORT`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `EXISTE_AEROPORT` (`CODE_AEROPORT` VARCHAR(50)) RETURNS TINYINT(1) READS SQL DATA
BEGIN
IF (SELECT count(*) FROM aeroport WHERE A_code = CODE_AEROPORT) > 0 THEN 
RETURN TRUE;
ELSE RETURN FALSE;
END IF;
END$$

DROP FUNCTION IF EXISTS `EXISTE_CLIENT`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `EXISTE_CLIENT` (`EMAIL` VARCHAR(50)) RETURNS TINYINT(1) READS SQL DATA
BEGIN
IF (SELECT count(*) FROM client WHERE C_mail = EMAIL) > 0 THEN 
RETURN TRUE;
ELSE RETURN FALSE;
END IF;
END$$

DROP FUNCTION IF EXISTS `EXISTE_PAYS`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `EXISTE_PAYS` (`NAME_PAYS` VARCHAR(50)) RETURNS TINYINT(1) READS SQL DATA
BEGIN
IF (SELECT count(*) FROM pays WHERE P_nom = NAME_PAYS) > 0 THEN
RETURN TRUE;
ELSE RETURN FALSE; 
END IF;
END$$

DROP FUNCTION IF EXISTS `EXISTE_VILLE`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `EXISTE_VILLE` (`NAME_VILLE` VARCHAR(50), `ID_PAYS` INT) RETURNS TINYINT(1) READS SQL DATA
BEGIN
IF (SELECT count(*) FROM ville WHERE V_nom = NAME_PAYS AND V_id_pays = ID_PAYS) > 0 THEN
RETURN TRUE;
ELSE RETURN FALSE; 
END IF;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Structure de la table `aeroport`
--

DROP TABLE IF EXISTS `aeroport`;
CREATE TABLE IF NOT EXISTS `aeroport` (
  `A_code` varchar(50) NOT NULL,
  `A_nom` varchar(50) NOT NULL,
  `A_id_ville` int(11) NOT NULL,
  PRIMARY KEY (`A_code`),
  KEY `A_id_ville` (`A_id_ville`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `aeroport`
--

INSERT INTO `aeroport` (`A_code`, `A_nom`, `A_id_ville`) VALUES
('CDG', 'Charles de Gaulle', 1),
('DTW', 'Detroit Metropolitan Wayne County', 2),
('JFK', 'John F. Kennedy', 3);

--
-- Déclencheurs `aeroport`
--
DROP TRIGGER IF EXISTS `TRIGGER_DELETE_AEROPORT`;
DELIMITER $$
CREATE TRIGGER `TRIGGER_DELETE_AEROPORT` BEFORE DELETE ON `aeroport` FOR EACH ROW DELETE FROM billet WHERE B_code_arriver = OLD.A_code OR B_code_depart = OLD.A_code
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Structure de la table `billet`
--

DROP TABLE IF EXISTS `billet`;
CREATE TABLE IF NOT EXISTS `billet` (
  `B_id` int(11) NOT NULL AUTO_INCREMENT,
  `B_code_depart` varchar(50) NOT NULL,
  `B_code_arriver` varchar(50) NOT NULL,
  `B_prix` float NOT NULL,
  `B_reserver` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`B_id`),
  KEY `B_code_depart` (`B_code_depart`),
  KEY `B_code_arriver` (`B_code_arriver`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Déclencheurs `billet`
--
DROP TRIGGER IF EXISTS `TRIGGER_DELETE_BILLET`;
DELIMITER $$
CREATE TRIGGER `TRIGGER_DELETE_BILLET` BEFORE DELETE ON `billet` FOR EACH ROW DELETE FROM reserver WHERE R_id_billet = OLD.B_id
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Structure de la table `client`
--

DROP TABLE IF EXISTS `client`;
CREATE TABLE IF NOT EXISTS `client` (
  `C_id` int(11) NOT NULL AUTO_INCREMENT,
  `C_nom` varchar(50) NOT NULL,
  `C_prenom` varchar(50) NOT NULL,
  `C_mail` varchar(50) NOT NULL,
  `C_hash` varchar(50) NOT NULL,
  `C_empreinte` varchar(50) NOT NULL,
  PRIMARY KEY (`C_id`),
  UNIQUE KEY `C_mail` (`C_mail`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Déclencheurs `client`
--
DROP TRIGGER IF EXISTS `TRIGGER_DELETE_CLIENT`;
DELIMITER $$
CREATE TRIGGER `TRIGGER_DELETE_CLIENT` BEFORE DELETE ON `client` FOR EACH ROW DELETE FROM reserver WHERE B_id_client = OLD.C_id
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Structure de la table `pays`
--

DROP TABLE IF EXISTS `pays`;
CREATE TABLE IF NOT EXISTS `pays` (
  `P_id` int(11) NOT NULL AUTO_INCREMENT,
  `P_nom` varchar(50) NOT NULL,
  PRIMARY KEY (`P_id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `pays`
--

INSERT INTO `pays` (`P_id`, `P_nom`) VALUES
(1, 'Etats-Unis'),
(2, 'France');

--
-- Déclencheurs `pays`
--
DROP TRIGGER IF EXISTS `TRIGGER_DELETE_PAYS`;
DELIMITER $$
CREATE TRIGGER `TRIGGER_DELETE_PAYS` BEFORE DELETE ON `pays` FOR EACH ROW DELETE FROM ville WHERE V_id_pays = OLD.P_id
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Structure de la table `reserver`
--

DROP TABLE IF EXISTS `reserver`;
CREATE TABLE IF NOT EXISTS `reserver` (
  `R_id_billet` int(11) NOT NULL,
  `R_id_client` int(11) NOT NULL,
  `R_date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`R_id_billet`,`R_id_client`),
  KEY `R_id_client` (`R_id_client`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Structure de la table `ville`
--

DROP TABLE IF EXISTS `ville`;
CREATE TABLE IF NOT EXISTS `ville` (
  `V_id` int(11) NOT NULL AUTO_INCREMENT,
  `V_nom` varchar(50) NOT NULL,
  `V_id_pays` int(11) NOT NULL,
  PRIMARY KEY (`V_id`),
  KEY `V_id_pays` (`V_id_pays`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Déchargement des données de la table `ville`
--

INSERT INTO `ville` (`V_id`, `V_nom`, `V_id_pays`) VALUES
(1, 'Paris', 2),
(2, 'Detroit', 1),
(3, 'New York', 1);

--
-- Déclencheurs `ville`
--
DROP TRIGGER IF EXISTS `TRIGGER_DELETE_VILLE`;
DELIMITER $$
CREATE TRIGGER `TRIGGER_DELETE_VILLE` BEFORE DELETE ON `ville` FOR EACH ROW DELETE FROM aeroport WHERE A_id_ville = OLD.V_id
$$
DELIMITER ;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
